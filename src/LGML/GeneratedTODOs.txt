//////////////////////////////////////
 Auto - Generated TODO list from source code with Scripts/generateTODOList.py
 useless to overwrite !! but useful for rainy sunday code cleaning and improving
 TODOs in source code are not meant to be features but improvement and cleaning of CODE
 a discussion can be added after TODO comment line in source code (but not meant to be long) 
 Of course this list can also be used to remove unnecessary TODOs...
 ///////////////////////////////////////


JsEnvironment.cpp
	line : 284
		// @ben only supported if move semantics are too are they for you?


NodeManager.cpp
	line : 264
		//TODO synchronize this and implement it for data
		// it's not indispensable

	line : 161
		// TODO nicely handle file format errors?


EngineFileDocument.cpp
	line : 101
		//    TODO check version Compat


VuMeter.h
	line : 15
		//TODO, move to more common place for use in other components


ControllableContainer.cpp
	line : 347
		//    @ben removed else here to enable containerlistener call back of non root (proxies) is it overkill?

	line : 87
		// @ben change nested callback for a special callback allowing listener to synchronize themselves without having to listen to every container


VSTNode.cpp
	line : 94
		// TODO check that it actually works

	line : 111
		//@Martin i addedd this because when not playing, it crashed
		// @ben it is necessary
		// if it triggers an assert it's that vst is wrongly implemened (and there are a lot...)
		// ignoring the assert seems fair enough for now (juce_VSTPluginFormat.cpp l:794 while checking doubleprecision)


LooperNode.cpp
	line : 66
		// TODO check if we can optimize copies
		// handle multiples channels outs


NodeConnectionEditor.cpp
	line : 157
		//@Martin : How to define how many channels a node has (input and output), it seems that it's defaulted to 2,
		//but i can't find how to set it up anywhere. is it dynamically computed when sending or receiving the AudioBuffer in processBlock ?
		// should be fixed !!

	line : 358
		//TODO : implement way to replace a "taken" slot with the one we are editing (with a confirmation prompt)


JsGlobalEnvironment.cpp
	line : 28
		// TODO: use a bit of ControllableContainer in controllers, its empty atm
		//    linkToControllableContainer("controllers",ControllerManager::getInstance());


ShapeShifterContainer.cpp
	line : 241
		//@ben what to we do for that?
		//@martin never gonna happen :)

	line : 126
		//@ben do we need to handle these?


DataProcessorGraph.cpp
	line : 14
		//    @ben not starting if not used, furthermore a while(true){} eats all the CPU for nothing
		//  thread.startThread();


ControllableInspector.cpp
	line : 85
		// TODO : -try to merge common properties based on first by deleting non common params within candidateContainers


MIDIController.cpp
	line : 80
		// @ben do we do the same as OSC MIDI IN/OUt controllers


TimeManager.h
	line : 28
		// TODO check if we can use SingleThread Singleton for fast access in processAdio


JavascriptControllerUI.cpp
	line : 14
		// @ben I really like this i.e deporting create instanciation in UI class (it avoid poluting engine with UI include) what about you?


NodeBase.cpp
	line : 143
		// TODO we could implement that for all node objects to be able to save any kind of custom data


ControllableContainer.h
	line : 112
		//@ ben this is to avoid either:
		//      adding controllableContainerListener for each implementation
		//      or overriding parameterValueChanged and needing to call ControllableContainer::parameterValueChanged in implementation (it should stay independent as a different mechanism)
		//      or using dispatch feedback that triggers only exposedParams


ControllableInspector.h
	line : 24
		// TODO handle merging of multiple component of sameClass : almost there ....


LooperTrack.cpp
	line : 174
		// TODO subBlock precision ?
		// not sure -> triggers are updated at block size granularity
		// for now reduce block approximation noise when quantized


