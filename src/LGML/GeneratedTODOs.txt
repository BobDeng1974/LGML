//////////////////////////////////////
 Auto - Generated TODO list from source code with Scripts/generateTODOList.py
 useless to overwrite !! but useful for rainy sunday code cleaning and improving
 TODOs in source code are not meant to be features but improvement and cleaning of CODE
 a discussion can be added after TODO comment line in source code (but not meant to be long) 
 Of course this list can also be used to remove unnecessary TODOs...
 ///////////////////////////////////////


ControllableContainer.cpp
	line : 423
		//    @ben removed else here to enable containerlistener call back of non root (proxies) is it overkill?

	line : 103
		// @ben change nested callback for a special callback allowing listener to synchronize themselves without having to listen to every container


ControllableInspector.cpp
	line : 85
		// TODO : -try to merge common properties based on first by deleting non common params within candidateContainers


NodeBase.cpp
	line : 299
		// @ben we need that (window of 64 sample cannot describe any accurate RMS level alone thus decay factor)

	line : 101
		// TODO we could implement that for all node objects to be able to save any kind of custom data


NodeContainer.h
	line : 69
		//@ben callNodeAdded allow caller to call it later when node is fully modified (needed for valid uid when filling preset comboboxes
		//(todo : find a way to have simpler event flow)


VSTNode.cpp
	line : 123
		//@Martin i addedd this because when not playing, it crashed
		// @ben it is necessary
		// if it triggers an assert it's that vst is wrongly implemened (and there are a lot...)
		// ignoring the assert seems fair enough for now (juce_VSTPluginFormat.cpp l:794 while checking doubleprecision)

	line : 107
		// TODO check that it actually works


VuMeter.h
	line : 16
		//TODO, move to more common place for use in other components


MainComponentCommands.cpp
	line : 240
		// TODO implement the JUCE version calling change every time something is made (maybe todo with undomanager)
		//			int result = engine->saveIfNeededAndUserAgrees();


JsEnvironment.cpp
	line : 302
		// @ben only supported if move semantics are too are they for you?


NodeContainer.cpp
	line : 178
		//@ben remove recursive for now (not useful and duplicating values...)
		//
		//    for (auto &n : nodes) n->saveCurrentPreset();

	line : 276
		// TODO nicely handle file format errors?

	line : 594
		//TODO synchronize this and implement it for data
		// it's not indispensable


TimeManager.h
	line : 31
		// TODO check if we can use SingleThread Singleton for fast access in processAdio


JavascriptControllerUI.cpp
	line : 14
		// @ben I really like this i.e deporting create instanciation in UI class (it avoid poluting engine with UI include) what about you?


LGMLLoggerUI.cpp
	line : 19
		//@martin i did that so i could clear the log, but the scollbar still goes down after clearing
		// @ben I cant see the problem here but we never want to clear everything at once no?
		//  could you explain the problem so that i can see what happen
		// when I log more than 50000 lines it works as expected for me
		//	if (totalLogRow >= maxNumElement)
		//	{
		//		logElements.clear();
		//		totalLogRow = 0;
		//		logListComponent->updateContent();
		//
		//	}


JsGlobalEnvironment.cpp
	line : 29
		// TODO: use a bit of ControllableContainer in controllers, its empty atm
		//    linkToControllableContainer("controllers",ControllerManager::getInstance());


NodeBase.h
	line : 48
		//  TODO:  this should not be implemented in Node to avoid overriding this method
		//    create onNodeParameterChanged();


NodeConnectionEditor.cpp
	line : 370
		//TODO : implement way to replace a "taken" slot with the one we are editing (with a confirmation prompt)

	line : 159
		//@Martin : How to define how many channels a node has (input and output), it seems that it's defaulted to 2,
		//but i can't find how to set it up anywhere. is it dynamically computed when sending or receiving the AudioBuffer in processBlock ?
		// should be fixed !!


LooperNode.cpp
	line : 70
		// TODO check if we can optimize copies
		// handle multiples channels outs


TimeManager.cpp
	line : 203
		//TODO: check


MIDIController.cpp
	line : 123
		// @ben do we do the same as OSC MIDI IN/OUt controllers


ControllableContainer.h
	line : 137
		//@ ben this is to avoid either:
		//      adding controllableContainerListener for each implementation
		//      or overriding parameterValueChanged and needing to call ControllableContainer::parameterValueChanged in implementation (it should stay independent as a different mechanism)
		//      or using dispatch feedback that triggers only exposedParams


ShapeShifterContainer.cpp
	line : 293
		//@ben what to we do for that?
		//@martin never gonna happen :)

	line : 127
		//@ben do we need to handle these?


LooperTrack.cpp
	line : 123
		// TODO subBlock precision ?
		// not sure -> triggers are updated at block size granularity
		// for now reduce block approximation noise when quantized


DataProcessorGraph.cpp
	line : 14
		//    @ben not starting if not used, furthermore a while(true){} eats all the CPU for nothing
		//  thread.startThread();


ControllableInspector.h
	line : 24
		// TODO handle merging of multiple component of sameClass : almost there ....


