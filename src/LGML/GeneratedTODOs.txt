//////////////////////////////////////
 Auto - Generated TODO list from source code with Scripts/generateTODOList.py
 useless to overwrite !! but useful for rainy sunday code cleaning and improving
 TODOs in source code are not meant to be features but improvement and cleaning of CODE
 a discussion can be added after TODO comment line in source code (but not meant to be long) 
 Of course this list can also be used to remove unnecessary TODOs...
 ///////////////////////////////////////


DataInNode.cpp
	line : 29
		// @ben string obviously can't send float in updateOutputData, so updating everything but string for now


ControllableContainer.cpp
	line : 416
		// TODO weird feedback when loading preset on parameter presetName

	line : 594
		// @ ben we don't want to load preset when loading from file, do we?
		//    if (data.getDynamicObject()->hasProperty(presetIdentifier))
		//    {
		//        loadPresetWithName(data.getDynamicObject()->getProperty("preset"));
		//    }
		// TODO switch Array to dynamic object (to avoid to store control address and store parameters in a namedValueSet )

	line : 507
		//    @ben removed else here to enable containerlistener call back of non root (proxies) is it overkill?


ControllableInspector.cpp
	line : 85
		// TODO : -try to merge common properties based on first by deleting non common params within candidateContainers


NodeBase.cpp
	line : 312
		// @ben we need that (window of 64 sample cannot describe any accurate RMS level alone thus decay factor)

	line : 103
		// TODO we could implement that for all node objects to be able to save any kind of custom data


NodeContainer.h
	line : 70
		//@ben callNodeAdded allow caller to call it later when node is fully modified (needed for valid uid when filling preset comboboxes
		//(todo : find a way to have simpler event flow)


VSTNode.cpp
	line : 118
		// TODO check that it actually works


VuMeter.h
	line : 16
		//TODO, move to more common place for use in other components


MainComponentCommands.cpp
	line : 247
		// TODO implement the JUCE version calling change every time something is made (maybe todo with undomanager)
		//			int result = engine->saveIfNeededAndUserAgrees();


JsEnvironment.cpp
	line : 348
		// @ben only supported if move semantics are too are they for you?


NodeContainer.cpp
	line : 624
		//TODO synchronize this and implement it for data
		// it's not indispensable

	line : 291
		// TODO nicely handle file format errors?

	line : 484
		// TODO we should give a pre_delete() function to nodes for unregistering all listener and stuffs,
		// for now re opening a complex session gives crash on the second open as they are not being deleted by us but the AudioGraph
		//        if(NodeBase *nb=dynamic_cast<NodeBase *>(node)){
		//         nb->stopTimer();
		//        }

	line : 182
		//@ben remove recursive for now (not useful and duplicating values...)
		//
		//    for (auto &n : nodes) n->saveCurrentPreset();


TimeManager.h
	line : 30
		// TODO check if we can use SingleThread Singleton for fast access in processAdio


JavascriptControllerUI.cpp
	line : 14
		// @ben I really like this i.e deporting create instanciation in UI class (it avoid poluting engine with UI include) what about you?


NodeBase.h
	line : 45
		//  TODO:  this should not be implemented in Node to avoid overriding this method
		//    create onNodeParameterChanged();


NodeConnectionEditor.cpp
	line : 160
		//@Martin : How to define how many channels a node has (input and output), it seems that it's defaulted to 2,
		//but i can't find how to set it up anywhere. is it dynamically computed when sending or receiving the AudioBuffer in processBlock ?
		// should be fixed !!

	line : 371
		//TODO : implement way to replace a "taken" slot with the one we are editing (with a confirmation prompt)


LooperNode.cpp
	line : 62
		// TODO check if we can optimize copies
		// handle multiples channels outs


TimeManager.cpp
	line : 266
		//TODO: check


MIDIController.cpp
	line : 160
		// @ben do we do the same as OSC MIDI IN/OUt controllers

	line : 39
		// TODO : we may need to listen to sR changes


ControllableContainer.h
	line : 139
		//@ ben this is to avoid either:
		//      adding controllableContainerListener for each implementation
		//      or overriding parameterValueChanged and needing to call ControllableContainer::parameterValueChanged in implementation (it should stay independent as a different mechanism)
		//      or using dispatch feedback that triggers only exposedParams


ShapeShifterContainer.cpp
	line : 293
		//@ben what to we do for that?
		//@martin never gonna happen :)

	line : 127
		//@ben do we need to handle these?


LooperTrack.cpp
	line : 180
		// TODO handle triggeringTime-quantizedRecordEnd !=0 (non BLOCKSIZEGRANULARITY not defined)


Main.cpp
	line : 149
		//@martin added but commented for testing (relou behavior)


MIDIManager.cpp
	line : 135
		// @Ben seems weird mixing duc
		// btw do we really need that for output??


DataProcessorGraph.cpp
	line : 14
		//    @ben not starting if not used, furthermore a while(true){} eats all the CPU for nothing
		//  thread.startThread();


ControllableInspector.h
	line : 23
		// TODO handle merging of multiple component of sameClass : almost there ....


